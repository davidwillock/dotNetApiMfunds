using System;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.ServiceModel.Syndication;
using System.Runtime.Serialization;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using System.Data;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Xml;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Script.Serialization;
using System.Collections;

[ServiceContract]
public class MyService
{


    [DataContract]
    public class loginDetails
    {

        public string _user;
        public string _password;
        public string _email;
        public string _country;


        [DataMember]
        public String username
        {
            get { return _user; }
            set { _user = value; }
        }


        [DataMember]
        public String password
        {
            get { return _password; }
            set { _password = value; }
        }


        [DataMember]
        public String email
        {
            get { return _email; }
            set { _email = value; }
        }


        [DataMember]
        public String country
        {
            get { return _country; }
            set { _country = value; }
        }



    }


    [DataContract]
    public class Fund
    {

        public string _symbol;
        public DateTime _epoch;
        public double _open;
        public double _high;
        public double _low;
        public double _close;
        public double _close_adj;
        public int _volume;



        [DataMember]
        public String Symbol
        {
            get { return _symbol; }
            set { _symbol = value; }
        }


        [DataMember]
        public DateTime epoch
        {
            get { return _epoch; }
            set { _epoch = value; }
        }


        [DataMember]
        public double open
        {
            get { return _open; }
            set { _open = value; }
        }


        [DataMember]
        public double high
        {
            get { return _high; }
            set { _high = value; }
        }

        [DataMember]
        public double low
        {
            get { return _low; }
            set { _low = value; }
        }

        [DataMember]
        public double close
        {
            get { return _close; }
            set { _close = value; }
        }

        [DataMember]
        public double close_adj
        {
            get { return _close_adj; }
            set { _close_adj = value; }
        }

        public int volume
        {
            get { return _volume; }
            set { _volume = value; }
        }




    }










    [JsonObject(MemberSerialization.OptIn)]
    public class login
    {
        [JsonProperty]
        public string username { get; set; }
        [JsonProperty]
        public string password { get; set; }

        [JsonProperty]
        public string email { get; set; }

        [JsonProperty]
        public string country { get; set; }


    }

    [JsonObject(MemberSerialization.OptIn)]
    public class jfund
    {
        [JsonProperty]
        public string symbol { get; set; }
        [JsonProperty]
        public DateTime epoch { get; set; }

        [JsonProperty]
        public double open { get; set; }

        [JsonProperty]
        public double high { get; set; }

        [JsonProperty]
        public double low { get; set; }

        [JsonProperty]
        public double close { get; set; }

        [JsonProperty]
        public double close_adj { get; set; }

        [JsonProperty]
        public double volume { get; set; }


        public override string ToString()
        {
            return "{'symbol': '" + symbol.ToString() + "'," +
                   "'epoch': '" + epoch.ToString() + "'," +
                   "'open': '" + open.ToString() + "'," +
                   "'high': '" + high.ToString() + "'," +
                   "'low': '" + low.ToString() + "'," +
                   "'close': '" + close.ToString() + "'," +
                   "'close_adj': '" + close_adj.ToString() + "'," +
                   "'volume': '" + volume.ToString() + "'}";
        }


    }



    [JsonObject(MemberSerialization.OptIn)]
    public class jSector
    {
        [JsonProperty]
        public int sectorid { get; set; }
        [JsonProperty]
        public String sector { get; set; }



        public override string ToString()
        {
            return "{'sectorid': '" + sectorid.ToString() + "'," +
                   "'sector': '" + sector.ToString() + "'," +
                   "'}";
        }


    }


    [JsonObject(MemberSerialization.OptIn)]
    public class jAsset
    {
        [JsonProperty]
        public int assetid { get; set; }
        [JsonProperty]
        public String asset { get; set; }



        public override string ToString()
        {
            return "{'assetid': '" + assetid.ToString() + "'," +
                   "asset': '" + asset.ToString() + "'," +
                   "'}";
        }


    }

    [JsonObject(MemberSerialization.OptIn)]
    public class jGeograph
    {
        [JsonProperty]
        public int geographid { get; set; }
        [JsonProperty]
        public String geograph { get; set; }



        public override string ToString()
        {
            return "{'geographid': '" + geographid.ToString() + "'," +
                   "georgraph': '" + geograph.ToString() + "'," +
                   "'}";
        }


    }


    [JsonObject(MemberSerialization.OptIn)]
    public class jChartHoldings
    {
        [JsonProperty]
        public String Asset { get; set; }
        [JsonProperty]
        public String Sector { get; set; }

        public String Geograph { get; set; }

        public override string ToString()
        {
            return "{'Asset': '" + Asset.ToString() + "'," +
                   "'Sector': '" + Sector.ToString() + "'," +
                    "'Geograph': '" + Geograph.ToString() + "'," +
                    "'}";
        }


    }


    [JsonObject(MemberSerialization.OptIn)]
    public class jChartSector


    {
        public String Fund { get; set; }
        [JsonProperty]
        public String Sector { get; set; }
        [JsonProperty]
        public int Count { get; set; }

        public int Percent { get; set; }




        public override string ToString()
        {
            return "{'Fund': '" + Fund.ToString() + "'," +
                "'Sector': '" + Sector.ToString() + "'," +
                   "'Count': '" + Count.ToString() + "'," +
                    "'Percent': '" + Percent.ToString()  +
                    "'}";
        }


    }


    [JsonObject(MemberSerialization.OptIn)]
    public class jChartAsset
    {
        [JsonProperty]

        public String Fund { get; set; }
        public String Asset { get; set; }
        [JsonProperty]
        public int Count { get; set; }

        public int Percent { get; set; }




        public override string ToString()
        {
            return "{'Fund': '" + Fund.ToString() + "'," +
                "'Asset': '" + Asset.ToString() + "'," +
                   "'Count': '" + Count.ToString() + "'," +
                    "'Percent': '" + Percent.ToString() + 
                    "'}";
        }


    }





    [JsonObject(MemberSerialization.OptIn)]
    public class jChartGeograph
    {
        [JsonProperty]

        public String Fund { get; set; }
        public String Geograph { get; set; }
        [JsonProperty]
        public int Count { get; set; }

        public int Percent { get; set; }




        public override string ToString()
        {
            return "{'Fund': '" + Fund.ToString() + "'," +
                "'Geograph': '" + Geograph.ToString() + "'," +
                   "'Count': '" + Count.ToString() + "'," +
                    "'Percent': '" + Percent.ToString() + 
                    "'}";
        }


    }








    public class Perf
    {

        private string symbol;

        public Perf(String symbol)
        {
            this.symbol = symbol;
        }

        public string Symbol
        {
            get { return symbol; }
            set { symbol = value; }
        }

    }



    public class jPerformDataEnum :  IEnumerable
    {


        private String[] performancelist;

      
        int cnt = 0;
   
        public jPerformDataEnum(String param, char[] delimeters)
        {

            performancelist = param.Split(delimeters);

        }


        public IEnumerator GetEnumerator()
        {
            return new jPerformData(this);
        }




        public class jPerformData : IEnumerator
        {

            int position = -1;

            private jPerformDataEnum J;



           public jPerformData(jPerformDataEnum J)
            {
                this.J = J;

            }
            
            public IEnumerator GetEnumerator()
            {
                return (IEnumerator)this;
            }

            
            public bool MoveNext()
            {
                position++;
                return (position < J.performancelist.Length);
            }

           
            public void Reset()
            { position = 0; }

           
            public object Current
            {
                get { return J.performancelist[position]; }
            }

        }

    }


    public class PerformanceCal
    {

        private string symbol;
        private DateTime date;
        private double navps;



        public String Symbol
        {
            get { return symbol; }
            set { symbol = value; }
        }

        public DateTime Date
        {
            get { return date ; }
            set { date = value; }
        }

        public double NavPS
        {
            get { return navps; }
            set { navps = value; }
        }




        public override string ToString()
        {
            return "{'Date': '" + Date.ToString() + "'," +
                "'Symbol': '" + Symbol.ToString() + "'," +
                   "'NavPS': '" + NavPS.ToString() +"'}";
        }





    }
















    [JsonObject(MemberSerialization.OptIn)]
    public class jPerformanceData 
    {




        



        [JsonProperty]
        public string SymID { get; set; }
        [JsonProperty]
        public DateTime InceptionDate { get; set; }

        [JsonProperty]
        public double MER { get; set; }

        [JsonProperty]
        public double Assets { get; set; }

        [JsonProperty]
        public double Rank { get; set; }

        [JsonProperty]
        public double MstarRating { get; set; }

        [JsonProperty]
        public double StdDev { get; set; }

        [JsonProperty]
        public double VolatileRank { get; set; }

        [JsonProperty]
        public double MstarRisk { get; set; }


        [JsonProperty]
        public double Alpha { get; set; }

        [JsonProperty]
        public double Beta { get; set; }


        [JsonProperty]
        public double Rsquared { get; set; }


        [JsonProperty]
        public String RRSPEligibility { get; set; }


        [JsonProperty]
        public String Load { get; set; }


        [JsonProperty]
        public double MaxBackEnd { get; set; }


        [JsonProperty]
        public double MaxFrontEnd { get; set; }


        [JsonProperty]
        public String SaleOpen { get; set; }


        [JsonProperty]
        public double NavPS { get; set; }


        [JsonProperty]
        public double NetAsset { get; set; }


        [JsonProperty]
        public double Yield { get; set; }

        [JsonProperty]
        public double Dividend { get; set; }

        [JsonProperty]
        public String Managers { get; set; }


        [JsonProperty]
        public double Fees { get; set; }

        [JsonProperty]
        public String FundName { get; set; }


       





        public override string ToString()
        {
            return "{'symbol': '" + SymID.ToString() + "'," +
                   "'InceptionDate': '" + InceptionDate.ToString() + "'," +
                   "'Mer': '" + MER.ToString() + "'," +
                   "'Assets': '" + Assets.ToString() + "'," +
                   "'Rank': '" + Rank.ToString() + "'," +
                   "'MstarRating': '" + MstarRating.ToString() + "'," +
                   "'StdDev': '" + StdDev.ToString() + "'," +
                   "'VolatileRank': '" + VolatileRank.ToString() + "'," +
                   "'MstarRisk': '" + MstarRisk.ToString() + "'," +
                   "'Alpha': '" + Alpha.ToString() + "'," +
                   "'Beta': '" + Beta.ToString() + "'," +
                   "'Rsquare': '" + Rsquared.ToString() + "'," +
                   "'RRSPEligibility': '" + RRSPEligibility.ToString() + "'," +
                    "'Load': '" + Load.ToString() + "'," +
                   "'MaxFrontEnd': '" + MaxFrontEnd.ToString() + "'," +
                   "'MaxBackEnd': '" + MaxBackEnd.ToString() + "'," +
                   "'SalesOpen': '" + SaleOpen.ToString() + "'," +
                   "'NavPs': '" + NavPS.ToString() + "'," +
                   "'NetAsset': '" + NetAsset.ToString() + "'," +
                   "'Yield': '" + Yield.ToString() + "'," +
                   "'Dividend': '" + Dividend.ToString() + "'," +
                   "'Manager': '" + Managers.ToString() + "'," +
                   "'Fees': '" + Fees.ToString() + "'," +
                   "'FundName': '" + FundName.ToString() + "'}"; 
                

    }



}





    [JsonObject(MemberSerialization.OptIn)]
    public class jPerformanceDataCalender
    {
        [JsonProperty]
        public String Return { get; set; }
        [JsonProperty]
        public double Y2007 { get; set; }

        [JsonProperty]
        public double Y2008 { get; set; }

        [JsonProperty]
        public double Y2009 { get; set; }

        [JsonProperty]
        public double Y2010 { get; set; }

        [JsonProperty]
        public double Y2011 { get; set; }

        [JsonProperty]
        public double Y2012 { get; set; }

        public double Y2013 { get; set; }

        public double Y2014 { get; set; }

        public double Y2015 { get; set; }

        public double Y2016 { get; set; }

        public double Y2017 { get; set; }


        public override string ToString()
        {
            return "{'Return': '" + Return.ToString() + "'," +
                   "'Y2007': '" + Y2007.ToString() + "'," +
                   "'Y2008': '" + Y2008.ToString() + "'," +
                   "'Y2009': '" + Y2009.ToString() + "'," +
                   "'Y2010': '" + Y2010.ToString() + "'," +
                   "'Y2011': '" + Y2011.ToString() + "'," +
                   "'Y2012': '" + Y2012.ToString() + "'," +
                   "'Y2013': '" + Y2013.ToString() + "'," +
                   "'Y2014': '" + Y2014.ToString() + "'," +
                   "'Y2015': '" + Y2015.ToString() + "'," +
                   "'Y2016': '" + Y2016.ToString() + "'," +
                   "'Y2017': '" + Y2017.ToString() +"'}";
        }
      }















    [JsonObject(MemberSerialization.OptIn)]
    public class jHoldings
    {
        [JsonProperty]
        public string FundSymID { get; set; }
        [JsonProperty]
        public string SymID { get; set; }

        [JsonProperty]
        public string Name { get; set; }

        [JsonProperty]
        public string Asset { get; set; }

        [JsonProperty]
        public string Sector { get; set; }

        [JsonProperty]
        public string Geograph { get; set; }

        [JsonProperty]
        public double Percentage { get; set; }


        public override string ToString()
        {
            return "{'FundSymID': '" + FundSymID.ToString() + "'," +
                   "'SymID': '" + SymID.ToString() + "'," +
                   "'Name': '" + Name.ToString() + "'," +
                   "'Asset': '" + Asset.ToString() + "'," +
                   "'Sector': '" + Sector.ToString() + "'," +
                   "'Geograph': '" + Geograph.ToString() + "'," +
                   "'Percentage': '" + Percentage.ToString() + "'}";
        }


    }








    [JsonObject(MemberSerialization.OptIn)]
    public class jPerformanceReturns
    {
        [JsonProperty]
        public string Return { get; set; }
        [JsonProperty]
        public double OneMonth { get; set; }

        [JsonProperty]
        public double ThreeMonth { get; set; }

        [JsonProperty]
        public double SixMonth { get; set; }

        [JsonProperty]
        public double YTD { get; set; }

        [JsonProperty]
        public double OneYear { get; set; }

        [JsonProperty]
        public double ThreeYear { get; set; }

        [JsonProperty]
        public double FiveYear { get; set; }

        [JsonProperty]
        public double TenYear { get; set; }


        public override string ToString()
        {
            return "{'Return': '" + Return.ToString() + "'," +
                   "'OneMonth': '" + OneMonth.ToString() + "'," +
                   "'ThreeMonth': '" + ThreeMonth.ToString() + "'," +
                   "'SixMonth': '" + SixMonth.ToString() + "'," +
                   "'YTD': '" + YTD.ToString() + "'," +
                   "'OneYear': '" + OneYear.ToString() + "'," +
                   "'ThreeYear': '" + ThreeYear.ToString() + "'," +
                   "'FiveYear': '" + FiveYear.ToString() + "'," +
                   "'TenYear': '" + TenYear.ToString() + "'}";
        }


    }























    public class SymbolDetails

    {

        public string _symbol;


        [DataMember]
        public String symbolName
        {
            get { return _symbol; }
            set { _symbol = value; }
        }


    }












    public class Geograph

    {

        public string Geo;


        [DataMember]
        public String symbolName
        {
            get { return Geo; }
            set { Geo = value; }
        }


    }


    public class Decision

    {

        public string _risk1;
        public string _risk2;


        [DataMember]
        public String risk1
        {
            get { return _risk1; }
            set { _risk1 = value; }
        }
        public String risk2
        {
            get { return _risk2; }
            set { _risk2 = value; }
        }


    }


    [JsonObject(MemberSerialization.OptIn)]
    public class jDecision
    {
        [JsonProperty]
        public string P1 { get; set; }
        [JsonProperty]
        public double P2 { get; set; }

       
        public override string ToString()
        {
            return "{'P1': '" + P1.ToString() + "'," +
                   "'P2': '" + P2.ToString() + "'}";
        }


    }




    [JsonObject(MemberSerialization.OptIn)]
    public class jIndexes
    {
        [JsonProperty]
        public String Symbol { get; set; }
        [JsonProperty]
        public String FullName { get; set; }



        public override string ToString()
        {
            return "{'Symbol': '" + Symbol.ToString() + "'," +
                   "'FullName': '" + FullName.ToString() + "'}";
        }


    }
















    [JsonObject(MemberSerialization.OptIn)]
    public class jRisk
    {
        [JsonProperty]
        public string risk1 { get; set; }
        public string risk2 { get; set; }

    }







    [OperationContract]

    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiLogin/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
           ResponseFormat = WebMessageFormat.Json)]
    bool validateLogin(String json)
    {

        string sUser;
        string sPassword;
        bool isValid = false;


        loginDetails ldetails = new loginDetails();


        ldetails = JsonConvert.DeserializeObject<loginDetails>(json);

        sUser = ldetails.username;
        sPassword = ldetails.password;






        try
        {

            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            string checkUser = "Select count(*) from userdata where username = '" + sUser + "'";

            SqlCommand com = new SqlCommand(checkUser, conn);

            int temp = Convert.ToInt32(com.ExecuteScalar().ToString());

            if (temp == 1)
            {


                string checkPasswordQuery = "Select password from userdata where password = '" + sPassword + "'";
                SqlCommand comPassword = new SqlCommand(checkPasswordQuery, conn);
                String password = comPassword.ExecuteScalar().ToString().Replace(" ", "");
                if (password == sPassword)
                {

                    isValid = true;

                }
                else
                {

                    isValid = false;


                }




                conn.Close();



            }
            else
            {





                isValid = false;







            }
        }
        catch (Exception)
        {
            isValid = false;

        }


        return isValid;


    }



    [OperationContract]

    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiRegister/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
               ResponseFormat = WebMessageFormat.Json)]
    bool register(String json)
    {

        string sUser;
        string sPassword;
        string sEmail;
        string sCountry;

        bool isValid = false;


        loginDetails ldetails = new loginDetails();


        ldetails = JsonConvert.DeserializeObject<loginDetails>(json);

        sUser = ldetails.username;
        sPassword = ldetails.password;
        sEmail = ldetails.email;
        sCountry = ldetails.country;



        Guid newGuid = Guid.NewGuid();

        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();




            // string checkUser = "Select count(*) from userdata where username = '" + TextBoxUserName.Text + "'";
            string insertUser = "Insert into userdata (Id,Username,Email,Password,Country) values (@id,@username,@email,@password,@country)";

            SqlCommand com = new SqlCommand(insertUser, conn);
            com.Parameters.AddWithValue("@username", sUser);
            com.Parameters.AddWithValue("@email", sEmail);
            com.Parameters.AddWithValue("@password", sPassword);
            com.Parameters.AddWithValue("@country", sCountry);
            com.Parameters.AddWithValue("@id", newGuid);

            com.ExecuteNonQuery();
            isValid = true;



            conn.Close();
        }

        catch (Exception)
        {


            isValid = false;


        }


        return isValid;



    }


    [OperationContract]

    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiIsValidUser/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
               ResponseFormat = WebMessageFormat.Json)]
    bool checkValidUser(String json)
    {

        string sUser;


        bool isValid = false;


        loginDetails ldetails = new loginDetails();


        ldetails = JsonConvert.DeserializeObject<loginDetails>(json);

        sUser = ldetails.username;




        Guid newGuid = Guid.NewGuid();

        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();



            string checkUser = "Select count(*) from userdata where username = '" + sUser + "'";

            SqlCommand com = new SqlCommand(checkUser, conn);

            int temp = Convert.ToInt32(com.ExecuteScalar().ToString());

            if (temp == 1)
            {
                isValid = true;


            }


            conn.Close();



        }
        catch (Exception ex)
        {
            isValid = false;

        }


        return isValid;

    }


    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectFundsBySymbol/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
              ResponseFormat = WebMessageFormat.Json)]
    String FundsBySymbol(String json)
    {



        SymbolDetails sd = new SymbolDetails();
        sd = JsonConvert.DeserializeObject<SymbolDetails>(json);

        String symName = sd.symbolName;




        jfund thefund = new jfund();

        String fund = symName;
        String jsonFund = "";
        List<jfund> _Fund = new List<jfund>();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();




            string checkUser = "Select * from symbols where symbol_ = '" + fund + "'";

            SqlCommand com = new SqlCommand(checkUser, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            //List<jfund> _Fund = new List<jfund>();


            // Fund Symbols = new Fund();

            jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {



                foreach (DataRow dr in table.Rows)
                {


                    thefund.symbol = dr["symbol_"].ToString();
                    thefund.epoch = dr.Field<DateTime>("epoch_");
                    thefund.open = dr.Field<double>("open_");
                    thefund.high = dr.Field<double>("high_");
                    thefund.low = dr.Field<double>("low_");
                    thefund.close = dr.Field<double>("close_");
                    thefund.close_adj = dr.Field<double>("close_adj");
                    thefund.volume = dr.Field<Int32>("volume_");






                    jsonstr += thefund.ToString();
                    jsonstr += ",";











                }


            }


            jsonstr = jsonstr.Remove(jsonstr.Length - 1);
            jsonstr += "]";



            //  JavaScriptSerializer jss = new JavaScriptSerializer();
            // jsonFund = jss.Serialize(_Fund);

            conn.Close();



        }
        catch (Exception ex)
        {


        }


        return jsonstr;

    }




    String buildStrPeformanceData(String risk1, String risk2)
    {





        jPerformanceData performance = new jPerformanceData();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();

     /*       string performancestr = "select P.SymID,P.InceptionDate_,P.MER_,P.Assets_,P.Rank_,P.MstarRating_,P.StdDev_,P.VolatileRank_," +
                "P.MstarRisk_,P.Alpha_,P.Beta_,P.Rsquared_,P.RRSPEligibility_,P.Load_,P.MaxFrontEnd_,P.MaxBackEnd_,P.SaleOpen_,P.NavPS_," +
                "P.NetAsset_,P.Yield_,P.Dividend_,P.Managers_,P.Fees_,P.FundName_" +
                " from PerformanceData P where P.MstarRisk_ = '" + risk + "'"; */


            string performancestr = "select P.SymID,P.InceptionDate_,P.MER_,P.Assets_,P.Rank_,P.MstarRating_,P.StdDev_,P.VolatileRank_," +
               "P.MstarRisk_,P.Alpha_,P.Beta_,P.Rsquared_,P.RRSPEligibility_,P.Load_,P.MaxFrontEnd_,P.MaxBackEnd_,P.SaleOpen_,P.NavPS_," +
               "P.NetAsset_,P.Yield_,P.Dividend_,P.Managers_,P.Fees_,P.FundName_" +
               " from PerformanceData P where  P.volatilerank_ >= '" + risk1 + "' and P.volatilerank_ <= '" + risk2 + "'";




           


            SqlCommand com = new SqlCommand(performancestr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);


            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    performance.SymID = dr["SymID"].ToString();
                    performance.InceptionDate = dr.Field<DateTime>("InceptionDate_");
                    performance.MER = dr.Field<double>("MER_");
                    performance.Assets = dr.Field<double>("Assets_");
                    performance.Rank = dr.Field<double>("Rank_");
                    performance.MstarRating = dr.Field<double>("MstarRating_");
                    performance.StdDev = dr.Field<double>("StdDev_");
                    performance.VolatileRank = dr.Field<double>("VolatileRank_");
                    performance.MstarRisk = dr.Field<double>("MstarRisk_");
                    performance.Alpha = dr.Field<double>("Alpha_");
                    performance.Beta = dr.Field<double>("Beta_");
                    performance.Rsquared = dr.Field<double>("Rsquared_");
                    performance.RRSPEligibility = dr.Field<String>("RRSPEligibility_");
                    performance.Load = dr.Field<String>("Load_");
                    performance.MaxFrontEnd = dr.Field<double>("MaxFrontEnd_");
                    performance.MaxBackEnd = dr.Field<double>("MaxBackEnd_");
                    performance.SaleOpen = dr.Field<String>("SaleOpen_");
                    performance.NavPS = dr.Field<double>("NavPS_");
                    performance.NetAsset = dr.Field<double>("NetAsset_");
                    performance.Yield = dr.Field<double>("Yield_");
                    performance.Dividend = dr.Field<double>("Dividend_");
                    performance.Managers = dr["Managers_"].ToString();
                    performance.Fees = dr.Field<double>("Fees_");
                    performance.FundName = dr["FundName_"].ToString();






                    jsonstr += performance.ToString();
                    jsonstr += ",";


                }

            }

        }
        catch (Exception ex) { }


        return jsonstr;

    }







    String buildStrHoldingsData(String risk1, String risk2)
    {







        // List<jPerformanceData> _Performance = new List<jPerformanceData>();


        // jHoldings holdings = new jHoldings();

        jHoldings holdings = new jHoldings();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();




            string holdingstr = "select h.FundSymID,h.symid,h.name,aa.asset,sa.sector,ga.geograph,h.percentage from holdings H left join AssetAllocation AA on H.assetid = AA.assetid left join SectorAllocation SA on H.sectorid = SA.sectorid left join GeographAllocation GA on H.geographid = GA.geographid left join PerformanceData P on H.FundSymID = P.SymID where P.volatilerank_ >= '" + risk1 + "' and P.volatilerank_ <= '" + risk2 + "'";


            //      string holdingstr = "select h.FundSymID,h.symid,h.name,aa.asset,sa.sector,ga.geograph,h.percentage from holdings H left join AssetAllocation AA on H.assetid = AA.assetid left join SectorAllocation SA on H.sectorid = SA.sectorid left join GeographAllocation GA on H.geographid = GA.geographid right join PerformanceData P on H.FundSymID = P.SymID  P.volatilerank_ >= '"+ risk +"' and P.volatilerank_ <= '"+risk+"'";



          


            SqlCommand com = new SqlCommand(holdingstr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    holdings.FundSymID = dr["FundSymID"].ToString();
                    holdings.SymID = dr["symid"].ToString();
                    holdings.Name = dr["name"].ToString();
                    holdings.Asset = dr["asset"].ToString();
                    holdings.Sector = dr["sector"].ToString();
                    holdings.Geograph = dr["geograph"].ToString();
                    holdings.Percentage = dr.Field<double>("percentage");




                    jsonstr += holdings.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }


    String buildStrReturnsData(String risk1, String risk2)
    {










        // List<jPerformanceData> _Performance = new List<jPerformanceData>();


        // jHoldings holdings = new jHoldings();

        jPerformanceReturns returns = new jPerformanceReturns();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


           // string returnstr = "select PDR.return_,PDR.OneMonth,PDR.ThreeMonth,PDR.SixMonth,PDR.YTD,PDR.OneYear,PDR.ThreeYear,PDR.FiveYear,PDR.TenYear from PerformanceDataReturn PDR left join PerformanceData P on PDR.return_ = P.SymID where MstarRisk_ = '" + risk + "'";

            string returnstr = "select PDR.return_,PDR.OneMonth,PDR.ThreeMonth,PDR.SixMonth,PDR.YTD,PDR.OneYear,PDR.ThreeYear,PDR.FiveYear,PDR.TenYear from PerformanceDataReturn PDR left join PerformanceData P on PDR.return_ = P.SymID where P.volatilerank_ >= '"+ risk1 +"' and P.volatilerank_ <= '"+risk2+"'";



        
            SqlCommand com = new SqlCommand(returnstr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    returns.Return = dr["Return_"].ToString();
                    returns.OneMonth = dr.Field<double>("OneMonth");
                    returns.ThreeMonth = dr.Field<double>("ThreeMonth");
                    returns.SixMonth = dr.Field<double>("SixMonth");
                    returns.YTD = dr.Field<double>("YTD");
                    returns.OneYear = dr.Field<double>("OneYear");
                    returns.ThreeYear = dr.Field<double>("ThreeYear");
                    returns.FiveYear = dr.Field<double>("FiveYear");
                    returns.TenYear = dr.Field<double>("TenYear");





                    jsonstr += returns.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }





    String buildStrSymbolsData(String risk1, String risk2)
    {



        jfund funds = new jfund();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            string symbolstr = "select S.symbol_,S.Epoch_,S.Open_,S.High_,S.Low_ ,S.Close_,S.Close_Adj,S.Volume_  from PerformanceData P " +
            "left join Symbols S on substring(s.symbol_, 1, LEN(S.symbol_) - 2) = P.SymID where P.volatilerank_ >= '" + risk1 + "' and P.volatilerank_ <= '" + risk2 + "' and symbol_ != ''";





            SqlCommand com = new SqlCommand(symbolstr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {



                    funds.symbol = dr["symbol_"].ToString();
                    funds.epoch = dr.Field<DateTime>("epoch_");
                    funds.open = dr.Field<double>("open_");
                    funds.high = dr.Field<double>("high_");
                    funds.low = dr.Field<double>("low_");
                    funds.close = dr.Field<double>("close_");
                    funds.close_adj = dr.Field<double>("close_adj");
                    funds.volume = dr.Field<Int32>("volume_");

                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }

























    String buildStrChartSector(String fund)
    {


        jChartSector funds = new jChartSector();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


          //  string symbolstr = "select * from sector";



            string query = "select SA.Sector, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join SectorAllocation SA on H.sectorid = SA.sectorid where fundsymid = '" + fund + "' group by SA.sector";







            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {

                    funds.Fund = fund;
                    funds.Sector = dr["Sector"].ToString();
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");
                   


                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }

    String buildStrChartAsset(String fund)
    {



        jChartAsset funds = new jChartAsset();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


        //    string symbolstr = "select * from Asset";

            string query = "select AA.Asset, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join AssetAllocation AA on H.assetid = AA.assetid where fundsymid = '" + fund + "' group by AA.Asset";




            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {

                    funds.Fund = fund;
                    funds.Asset = dr["Asset"].ToString();
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");



                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }


    String buildStrChartGeograph(String fund)
    {



        jChartGeograph funds = new jChartGeograph();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            

            string query = "select GA.Geograph, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join GeographAllocation GA on H.Geographid = GA.Geographid where fundsymid = '" + fund + "' group by GA.Geograph";





            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    funds.Fund = fund;
                    funds.Geograph = dr["Geograph"].ToString();
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");


                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }



    String buildStrPerformanceCalander(String risk1, String risk2)
    {



        //  jPerformanceDataCalender Calender = new jPerformanceDataCalender();

     //   jPerformanceCalendar Calender = new jPerformanceData();
      //  jPerformanceDataCalender Calender = jPerformanceDataCalender();

        PerformanceCal Calender = new PerformanceCal();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();




            string query = "select c.Year_,c.Symbol_,c.NavPS_ from PerformanceCalander c left join performancedata d on c.symbol_ = d.symid where d.volatilerank_ >='" + risk1 +"' and d.volatilerank_ <= '"+risk2+"'";




            






            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {



                    Calender.Date = dr.Field<DateTime>("Year_");
                    Calender.Symbol = dr.Field<String>("Symbol_");
                    Calender.NavPS = dr.Field<double>("NavPS_");




                    jsonstr += Calender.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }





















    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectFundsByRisk/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
        ResponseFormat = WebMessageFormat.Json)]
    String FundsByRisk(String json)
    {


        jRisk jr = new jRisk();
        Decision risk = new Decision();
        risk = JsonConvert.DeserializeObject<Decision>(json);

        String risk1 = risk.risk1;
        String risk2 = risk.risk2;

        String jsonstr = "";

        

        String ReturnsData = buildStrReturnsData(risk1,risk2);


       
        if (ReturnsData.Equals(""))
        {

            ReturnsData = "{'Return': '-','OneMonth' : '0','ThreeMonth': '0', 'SixMonth': '0','ThreeMonth': '0' ,'SixMonth': '0','YTD': '0','OneYear': '0','ThreeYear' : '0','FiveYear' : '0','TenYear' : '0'}";

        }
        else
        {
            ReturnsData = ReturnsData.Remove(ReturnsData.Length - 1);
        }

        String HoldingsData = buildStrHoldingsData(risk1,risk2);
        if (HoldingsData.Equals(""))
        {

           

            HoldingsData = "{'FundSymID': '-','SymID' : '-','Name': '-', 'Asset': '-','Sector': '-' ,'Geograph': '-','Percentage': '0'}";

        }
        else
        {
            HoldingsData = HoldingsData.Remove(HoldingsData.Length - 1);
        }


        String PerformanceData = buildStrPeformanceData(risk1,risk2);
        if (PerformanceData.Equals(""))
        {


            


            

            PerformanceData = "{'symbol': '-','InceptionDate' : '2001-01-01','Mer': '0', 'Asset': '0','Rank': '0' ,'MstarRating': '0','StdDev': '0','VolatileRank': '0','Alpha': '0','Beta': '0','Rsquare': '0','RRSPEligibility': '-','Load': '-','MaxFrontEnd': '0','MaxBackEnd': '0','SalesOpen': '-','NavPs': '0','NetAsset': '0','Yield': '0','Dividend': '0','Managers': '0','Fees': '0','FundName': '0'}";

        }
        else
        {
            PerformanceData = PerformanceData.Remove(PerformanceData.Length - 1);
        }





        String SymbolsData = buildStrSymbolsData(risk1,risk2);

        if (SymbolsData.Equals(""))
        {


           
            HoldingsData = "{'symbol': '-','epoch' : '-','open': '-', 'high': '-','low': '-' ,'close': '-','close_adj': '0','volume': '0'}";

        

        }
        else
        {
            SymbolsData = SymbolsData.Remove(SymbolsData.Length - 1);
        }


        String PerformanceDataCalander =  buildStrPerformanceCalander(risk1, risk2);

        if (PerformanceDataCalander.Equals(""))
        {



            PerformanceDataCalander = "{'Date': '-','Symbol' : '-','NavPS': '-'}";



        }
        else
        {
            PerformanceDataCalander = PerformanceDataCalander.Remove(PerformanceDataCalander.Length - 1);
        }


        String PerformanceIDXCalander = buildStrIDX();

        if (PerformanceIDXCalander.Equals(""))
        {



            PerformanceIDXCalander = "{'Date': '-','Symbol' : '-','NavPS': '-'}";



        }
        else
        {
            PerformanceIDXCalander = PerformanceIDXCalander.Remove(PerformanceIDXCalander.Length - 1);
        }


        String SpinnerIdx = buildStrIDXSpinner();

        if (SpinnerIdx.Equals(""))
        {



            SpinnerIdx = "{'Symbol': '-','FullName' : '-'}";



        }
        else
        {
            SpinnerIdx = SpinnerIdx.Remove(SpinnerIdx.Length - 1);
        }










     

















        jPerformDataEnum  data   =  getFundsbyRisk(risk1,risk2);
        String SectorData = "";
        String AssetData = "";
        String GeographData = ""; 
       

        foreach(String items in data)
        {


            string fund = items;


            String Sector = buildStrChartSector(fund);
            if (Sector.Equals(""))
            {

                Sector = "{'Fund': '-','Sector' : '-','Count': '0', 'Percent': '0'}";

            }
            else
            {
                Sector = Sector.Remove(Sector.Length - 1);
            }





            String Asset = buildStrChartAsset(fund);

            if (Asset.Equals(""))
            {

                Asset = "{'Fund': '-','Asset' : '-','Count': '0', 'Percent': '0'}";

            }
            else
            {
                Asset = Asset.Remove(Asset.Length - 1);

            }
            String Geograph = buildStrChartGeograph(fund);

            if (Geograph.Equals(""))
            {

                Geograph = "{'Fund': '-','Geograph' : '-','Count': '0', 'Percent': '0'}";

            }
            else
            {

                Geograph = Geograph.Remove(Geograph.Length - 1);

            }


            SectorData += Sector+ ",";
            AssetData += Asset +",";
            GeographData +=Geograph+ ",";

           








        }



       











        String sectorlastchar = SectorData.Substring(SectorData.Length - 1);

        if (sectorlastchar.Equals(","))
        {

            SectorData = SectorData.Remove(SectorData.Length - 1);

        }

        String assetlastchar = AssetData.Substring(AssetData.Length - 1);

        if (assetlastchar.Equals(","))
        {

            AssetData = AssetData.Remove(AssetData.Length - 1);

        }

        String geographlastchar = GeographData.Substring(GeographData.Length - 1);

        if (geographlastchar.Equals(","))
        {

            GeographData = GeographData.Remove(GeographData.Length - 1);

        }











        jsonstr = "{Returns : [";
        jsonstr += ReturnsData;
        jsonstr += "],";
        jsonstr += "Holdings: [";
        jsonstr += HoldingsData + "],";
        jsonstr += "Performance: [";
        jsonstr += PerformanceData + "],";
        jsonstr += "Symbols: [";
        jsonstr += SymbolsData + "],";
        jsonstr += "AssetChart: [";
        jsonstr += AssetData + "],";
        jsonstr += "SectorChart: [";
        jsonstr += SectorData + "],";
        jsonstr += "GeographChart: [";
        jsonstr += GeographData + "],";                                
        jsonstr += "PerformanceCalander: [";
        jsonstr += PerformanceDataCalander +"],";
        jsonstr += "PerformanceCalanderIDX: [";
        jsonstr += PerformanceIDXCalander + "],";
        jsonstr += "SpinnerIDX: [";
        jsonstr += SpinnerIdx + "]}";









        return jsonstr;

    }




[System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectChartSector/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
    ResponseFormat = WebMessageFormat.Json)]
String ChartSector(String json)
{




        jChartHoldings jcharts = new jChartHoldings();
            
            
            
         jcharts   =JsonConvert.DeserializeObject<jChartHoldings>(json);

      //  String asset = jcharts.Asset;
        String fund = jcharts.Sector;
    //  String geograph = jcharts.Geograph;


        
      

    String jsonstr = "";




    jChartSector funds = new jChartSector();

   
    try
    {
        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
        conn.Open();


            //   string query = "select SA.Sector, count(H.sectorID) as count, (100.00 * cast(count(*) as decimal) / (select count(*)   from holdings))  as [Percent] from holdings H " +
            //           "  left join SectorAllocation SA on H.sectorid = SA.sectorid group by SA.sector";


            string query = "select SA.Sector, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '"+fund+"'))  as [Percent] from holdings H left join SectorAllocation SA on H.sectorid = SA.sectorid where fundsymid = '"+fund+"' group by SA.sector";



            json = "[";
           

            SqlCommand com = new SqlCommand(query, conn);

        SqlDataAdapter adap = new SqlDataAdapter(com);
        DataSet ds = new DataSet();
        adap.Fill(ds);

       

        foreach (DataTable table in ds.Tables)
        {


            foreach (DataRow dr in table.Rows)
            {

                   

                    funds.Sector = dr.Field<String>("Sector");
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");
                   
                    jsonstr += funds.ToString();
                jsonstr += ",";


            }


        }
    }


    catch (Exception ex)
    {
    }


        jsonstr = jsonstr.Remove(jsonstr.Length - 1);
        jsonstr += "]";







        return jsonstr;


}





    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectChartAsset/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
        ResponseFormat = WebMessageFormat.Json)]
    String ChartAsset(String json)
    {


        jChartHoldings jcharts; 
        jcharts = JsonConvert.DeserializeObject<jChartHoldings>(json);

      



      

        //  String asset = jcharts.Asset;
        String fund = jcharts.Asset;
        //  String geograph = jcharts.Geograph;





        String jsonstr = "";




        jChartAsset funds = new jChartAsset();


        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            //   string query = "select SA.Sector, count(H.sectorID) as count, (100.00 * cast(count(*) as decimal) / (select count(*)   from holdings))  as [Percent] from holdings H " +
            //           "  left join SectorAllocation SA on H.sectorid = SA.sectorid group by SA.sector";


            string query = "select AA.Asset, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join AssetAllocation AA on H.assetid = AA.assetid where fundsymid = '" + fund + "' group by AA.Asset";



            json = "[";


            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);



            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {



                    funds.Asset = dr.Field<String>("Asset");
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");

                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }


        jsonstr = jsonstr.Remove(jsonstr.Length - 1);
        jsonstr += "]";







        return jsonstr;


    }







    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectChartGeo/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
        ResponseFormat = WebMessageFormat.Json)]
    String ChartAssetGeo(String json)
    {

        
        Geograph jcharts = new Geograph();
        
        jcharts = JsonConvert.DeserializeObject<Geograph>(json);

        //  String asset = jcharts.Asset;
        String fund = jcharts.Geo;
        //  String geograph = jcharts.Geograph;

        



        String jsonstr = "";





        jChartAsset funds = new jChartAsset();


        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            //   string query = "select SA.Sector, count(H.sectorID) as count, (100.00 * cast(count(*) as decimal) / (select count(*)   from holdings))  as [Percent] from holdings H " +
            //           "  left join SectorAllocation SA on H.sectorid = SA.sectorid group by SA.sector";


            string query = "select AA.Asset, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join AssetAllocation AA on H.assetid = AA.assetid where fundsymid = '" + fund + "' group by AA.Asset";



            json = "[";


            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);



            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {



                    funds.Asset = dr.Field<String>("Asset");
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");

                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }


        jsonstr = jsonstr.Remove(jsonstr.Length - 1);
        jsonstr += "]";







        return jsonstr;


    }

    
    [System.ServiceModel.Web.WebGet(UriTemplate = "/apiSelectChartGeograph/{json}", BodyStyle = WebMessageBodyStyle.Wrapped,
        ResponseFormat = WebMessageFormat.Json)]
    String ChartGeographs(String json)
    {

        jChartHoldings jcharts = new jChartHoldings();



        jcharts = JsonConvert.DeserializeObject<jChartHoldings>(json);

        //  String asset = jcharts.Asset;
        String fund = jcharts.Sector;
        //  String geograph = jcharts.Geograph;





        String jsonstr = "";




        jChartGeograph funds = new jChartGeograph();


        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            //   string query = "select SA.Sector, count(H.sectorID) as count, (100.00 * cast(count(*) as decimal) / (select count(*)   from holdings))  as [Percent] from holdings H " +
            //           "  left join SectorAllocation SA on H.sectorid = SA.sectorid group by SA.sector";


            string query = "select GA.Asset, count(H.sectorID) as count, (100 * count(*) / (select count(*)   from holdings where fundsymid = '" + fund + "'))  as [Percent] from holdings H left join GeographAllocation GA on H.geographid = GA.geographid where fundsymid = '" + fund + "' group by GA.Geograph";



            json = "[";


            SqlCommand com = new SqlCommand(query, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);



            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {



                    funds.Geograph = dr.Field<String>("Geograph");
                    funds.Count = dr.Field<int>("Count");
                    funds.Percent = dr.Field<int>("Percent");

                    jsonstr += funds.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }


        jsonstr = jsonstr.Remove(jsonstr.Length - 1);
        jsonstr += "]";







        return jsonstr;


    }




    jPerformDataEnum getFundsbyRisk(String risk1, String risk2)
    {





        jPerformanceData performance = new jPerformanceData();

       



           

            

            String buildstr = "";

            jPerformDataEnum c = null;
            try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();

           
            string performancestr = "select P.SymID,P.InceptionDate_,P.MER_,P.Assets_,P.Rank_,P.MstarRating_,P.StdDev_,P.VolatileRank_," +
               "P.MstarRisk_,P.Alpha_,P.Beta_,P.Rsquared_,P.RRSPEligibility_,P.Load_,P.MaxFrontEnd_,P.MaxBackEnd_,P.SaleOpen_,P.NavPS_," +
               "P.NetAsset_,P.Yield_,P.Dividend_,P.Managers_,P.Fees_,P.FundName_" +
               " from PerformanceData P where  P.volatilerank_ >= '" + risk1 + "' and P.volatilerank_ <= '" + risk2 + "'";




            



            SqlCommand com = new SqlCommand(performancestr, conn);
            jPerformanceData data = new jPerformanceData();

               

                

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);


            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                  String sym  = dr["SymID"].ToString();

                    buildstr+= sym + " ";

                        
                        



                }

            }

        }
        catch (Exception ex) { }



        jPerformDataEnum jdata = new jPerformDataEnum(buildstr, new Char[] {' ',','});   


        return jdata;

    }








    String buildStrIDX()
    {



        PerformanceCal Calender = new PerformanceCal();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            string symbolstr = "select * from  PerformanceCalander where symbol_ like '^%'";





            SqlCommand com = new SqlCommand(symbolstr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    Calender.Date = dr.Field<DateTime>("Year_");
                    Calender.Symbol = dr.Field<String>("Symbol_");
                    Calender.NavPS = dr.Field<double>("NavPS_");

                    jsonstr += Calender.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }



    String buildStrIDXSpinner()
    {



        jIndexes idx = new jIndexes();

        String jsonstr = "";
        try
        {
            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MfundsConnectionString"].ConnectionString);
            conn.Open();


            string symbolstr = "select * from Idx";





            SqlCommand com = new SqlCommand(symbolstr, conn);

            SqlDataAdapter adap = new SqlDataAdapter(com);
            DataSet ds = new DataSet();
            adap.Fill(ds);

            // jsonstr = "[";

            foreach (DataTable table in ds.Tables)
            {


                foreach (DataRow dr in table.Rows)
                {


                    idx.Symbol = dr.Field<String>("Symbol");
                    idx.FullName = dr.Field<String>("FullName");
                    jsonstr += idx.ToString();
                    jsonstr += ",";


                }


            }
        }


        catch (Exception ex)
        {
        }







        return jsonstr;


    }

















}






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































